/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { BSTokenUpgradeableProxyBase } from "../BSTokenUpgradeableProxyBase";

export class BSTokenUpgradeableProxyBase__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BSTokenUpgradeableProxyBase> {
    return super.deploy(
      overrides || {}
    ) as Promise<BSTokenUpgradeableProxyBase>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BSTokenUpgradeableProxyBase {
    return super.attach(address) as BSTokenUpgradeableProxyBase;
  }
  connect(signer: Signer): BSTokenUpgradeableProxyBase__factory {
    return super.connect(signer) as BSTokenUpgradeableProxyBase__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BSTokenUpgradeableProxyBase {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as BSTokenUpgradeableProxyBase;
  }
}

const _abi = [
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0x2424f9ce",
        type: "bytes32",
      },
    ],
    name: "c_0x2424f9ce",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0xc63f9b66",
        type: "bytes32",
      },
    ],
    name: "c_0xc63f9b66",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "initialAddress",
        type: "address",
      },
    ],
    name: "initializeProxy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610784806100206000396000f3fe6080604052600436106100385760003560e01c80634a0687ef146100515780634efb945f1461007a578063c08f52f1146100a357610047565b36610047576100456100cc565b005b61004f6100cc565b005b34801561005d57600080fd5b50610078600480360381019061007391906105a9565b6100e6565b005b34801561008657600080fd5b506100a1600480360381019061009c91906105d2565b6103bc565b005b3480156100af57600080fd5b506100ca60048036038101906100c591906105d2565b6103bf565b005b6100d46103c2565b6100e46100df6103c4565b610457565b565b6101127f359f4caead21c0f65c38760aa7907741cb30a65abd7e1212fac85a3f5fee589760001b6103bc565b61013e7f4428954609349e183621d8c2a5c3b46b6d111092190390e705bab0cfc71d1cd060001b6103bc565b61016a7f01b2beba970c7453a4b0aa33568ec9325a6fcf4f73dec8f135ffc9490087fede60001b6103bc565b6101967fea07f18fe2405e8aeda0e0efd5f44de12c2f14d68998124a840e51dba8e3ecd760001b6103bc565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610206576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fd90610661565b60405180910390fd5b6102327f1ab01e938fe7c01ca0240d389fa7ae3586bbfc673913f7af49cf3e1700bacd9c60001b6103bc565b61025e7f31cd51505b645e6783cdf78e88068951928e37e0fe6a9cdcff968a5b1576374060001b6103bc565b61028a7f77ba71d2edc010e77cb07c63711d6a2f8955a2600a003a6e167614d5dfcabbe560001b6103bc565b6102b67fff87c6e2c8847592008c873fcf27b61658143e4463026209cf110ce4ef2a295960001b6103bc565b600073ffffffffffffffffffffffffffffffffffffffff166102d661047d565b73ffffffffffffffffffffffffffffffffffffffff161461032c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032390610641565b60405180910390fd5b6103587ffe81a399660f98ed09090cb688ec7b1cb121ec29b2ea926842cdcb9095c7372960001b6103bc565b6103847f5228792f31b6666beb0f41083fa73b8e1a13695be6f4b838e59bc555857fa75260001b6103bc565b6103b07f7f0cc1ad99496162bcde265fcbc3a149265355d205c912dddf86e21b0b2352e960001b6103bc565b6103b9816104fe565b50565b50565b50565b565b60006103f27f3489c58ade827b95978cd51a43e16bda7991437c24b8193fb08b370c31dc2e4d60001b6103bc565b61041e7f85f7ba7efa9a5308ecc8d2c3f4bd900bea57a896929fd95793a87d15f1e8d79860001b6103bc565b61044a7f179cdd2a149e5cc807b2e6c3f62d74e88778ff096c04ea142caa970f111d2bc060001b6103bc565b61045261047d565b905090565b3660008037600080366000845af43d6000803e8060008114610478573d6000f35b3d6000fd5b60006104ab7f54af69f8f53845dd589e6a3098b129cb83deee27c56cbce956e69295a47a1fb360001b61057c565b6104d77fa24eaa55cb250d261b318594775d232d4b5fda8775e9dae1c78e2c5f4271ad7960001b61057c565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54905090565b61052a7f281dc8a9869a81bb24d0d61fcbd756ccb10dbab03c08278b107b5050c230d81a60001b61057c565b6105567f886eec49c242f6967bad5b9289f67c22490e3021cc7bceb1d47fe9114cbc2f3960001b61057c565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5550565b50565b60008135905061058e81610720565b92915050565b6000813590506105a381610737565b92915050565b6000602082840312156105bb57600080fd5b60006105c98482850161057f565b91505092915050565b6000602082840312156105e457600080fd5b60006105f284828501610594565b91505092915050565b6000610608601e83610681565b9150610613826106ce565b602082019050919050565b600061062b601783610681565b9150610636826106f7565b602082019050919050565b6000602082019050818103600083015261065a816105fb565b9050919050565b6000602082019050818103600083015261067a8161061e565b9050919050565b600082825260208201905092915050565b600061069d826106ae565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f5555505350726f78793a20616c726561647920696e697469616c697a65640000600082015250565b7f5555505350726f78793a207a65726f2061646472657373000000000000000000600082015250565b61072981610692565b811461073457600080fd5b50565b610740816106a4565b811461074b57600080fd5b5056fea2646970667358221220940cadc82310c0accb2704d75aba8d9e739889c1c03fd6a35adbb44cac8250de64736f6c63430008010033";
