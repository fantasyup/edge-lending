/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { BaseJumpRateModelV2 } from "../BaseJumpRateModelV2";

export class BaseJumpRateModelV2__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    baseRatePerYear: BigNumberish,
    multiplierPerYear: BigNumberish,
    jumpMultiplierPerYear: BigNumberish,
    kink_: BigNumberish,
    owner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BaseJumpRateModelV2> {
    return super.deploy(
      baseRatePerYear,
      multiplierPerYear,
      jumpMultiplierPerYear,
      kink_,
      owner_,
      overrides || {}
    ) as Promise<BaseJumpRateModelV2>;
  }
  getDeployTransaction(
    baseRatePerYear: BigNumberish,
    multiplierPerYear: BigNumberish,
    jumpMultiplierPerYear: BigNumberish,
    kink_: BigNumberish,
    owner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      baseRatePerYear,
      multiplierPerYear,
      jumpMultiplierPerYear,
      kink_,
      owner_,
      overrides || {}
    );
  }
  attach(address: string): BaseJumpRateModelV2 {
    return super.attach(address) as BaseJumpRateModelV2;
  }
  connect(signer: Signer): BaseJumpRateModelV2__factory {
    return super.connect(signer) as BaseJumpRateModelV2__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BaseJumpRateModelV2 {
    return new Contract(address, _abi, signerOrProvider) as BaseJumpRateModelV2;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "baseRatePerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "multiplierPerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "jumpMultiplierPerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "kink_",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "baseRatePerBlock",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "multiplierPerBlock",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "jumpMultiplierPerBlock",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "kink",
        type: "uint256",
      },
    ],
    name: "NewInterestParams",
    type: "event",
  },
  {
    inputs: [],
    name: "baseRatePerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "blocksPerYear",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrows",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserves",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveFactorMantissa",
        type: "uint256",
      },
    ],
    name: "getSupplyRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "jumpMultiplierPerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "kink",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "multiplierPerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "baseRatePerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "multiplierPerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "jumpMultiplierPerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "kink_",
        type: "uint256",
      },
    ],
    name: "updateJumpRateModel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrows",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserves",
        type: "uint256",
      },
    ],
    name: "utilizationRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161071e38038061071e83398101604081905261002f916100f9565b600080546001600160a01b0319166001600160a01b03831617905561005685858585610060565b50505050506101b8565b61006d622014808561016d565b60025561007d816220148061018d565b61008f84670de0b6b3a764000061018d565b610099919061016d565b6001556100a9622014808361016d565b600381905560048290556002546001546040517f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d936100eb9392918690610152565b60405180910390a150505050565b600080600080600060a08688031215610110578081fd5b855160208701516040880151606089015160808a0151939850919650945092506001600160a01b0381168114610144578182fd5b809150509295509295909350565b93845260208401929092526040830152606082015260800190565b60008261018857634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156101b357634e487b7160e01b81526011600452602481fd5b500290565b610557806101c76000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063a385fb9611610066578063a385fb96146100f3578063b8168816146100fb578063b9f9850a1461010e578063f14039de14610116578063fd2da3391461011e57610093565b80632037f3e7146100985780636e71e2d8146100ad5780638726bb89146100d65780638da5cb5b146100de575b600080fd5b6100ab6100a63660046103ee565b610126565b005b6100c06100bb3660046103c3565b61016b565b6040516100cd9190610479565b60405180910390f35b6100c06101b5565b6100e66101bb565b6040516100cd919061041f565b6100c06101ca565b6100c06101093660046103ee565b6101d1565b6100c061024d565b6100c0610253565b6100c0610259565b6000546001600160a01b031633146101595760405162461bcd60e51b815260040161015090610433565b60405180910390fd5b6101658484848461025f565b50505050565b60008261017a575060006101ae565b81610185848661049d565b61018f91906104f4565b6101a184670de0b6b3a76400006104d5565b6101ab91906104b5565b90505b9392505050565b60015481565b6000546001600160a01b031681565b6220148081565b6000806101e683670de0b6b3a76400006104f4565b905060006101f58787876102f8565b90506000670de0b6b3a764000061020c84846104d5565b61021691906104b5565b9050670de0b6b3a76400008161022d8a8a8a61016b565b61023791906104d5565b61024191906104b5565b98975050505050505050565b60035481565b60025481565b60045481565b61026c62201480856104b5565b60025561027c81622014806104d5565b61028e84670de0b6b3a76400006104d5565b61029891906104b5565b6001556102a862201480836104b5565b600381905560048290556002546001546040517f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d936102ea9392918690610482565b60405180910390a150505050565b60008061030685858561016b565b9050600454811161034757600254670de0b6b3a76400006001548361032b91906104d5565b61033591906104b5565b61033f919061049d565b9150506101ae565b6000600254670de0b6b3a764000060015460045461036591906104d5565b61036f91906104b5565b610379919061049d565b905060006004548361038b91906104f4565b905081670de0b6b3a7640000600354836103a591906104d5565b6103af91906104b5565b6103b9919061049d565b93505050506101ae565b6000806000606084860312156103d7578283fd5b505081359360208301359350604090920135919050565b60008060008060808587031215610403578081fd5b5050823594602084013594506040840135936060013592509050565b6001600160a01b0391909116815260200190565b60208082526026908201527f6f6e6c7920746865206f776e6572206d61792063616c6c20746869732066756e60408201526531ba34b7b71760d11b606082015260800190565b90815260200190565b93845260208401929092526040830152606082015260800190565b600082198211156104b0576104b061050b565b500190565b6000826104d057634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156104ef576104ef61050b565b500290565b6000828210156105065761050661050b565b500390565b634e487b7160e01b600052601160045260246000fdfea264697066735822122060e765275d84f4a3e6350ecb0d1fd0716a0dc6c2981db9d9ed8991dc50f5ea9664736f6c63430008010033";
