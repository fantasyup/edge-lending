/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { ChainlinkUSDAdapter } from "../ChainlinkUSDAdapter";

export class ChainlinkUSDAdapter__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _assetName: string,
    _assetSymbol: string,
    _asset: string,
    _aggregator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ChainlinkUSDAdapter> {
    return super.deploy(
      _assetName,
      _assetSymbol,
      _asset,
      _aggregator,
      overrides || {}
    ) as Promise<ChainlinkUSDAdapter>;
  }
  getDeployTransaction(
    _assetName: string,
    _assetSymbol: string,
    _asset: string,
    _aggregator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _assetName,
      _assetSymbol,
      _asset,
      _aggregator,
      overrides || {}
    );
  }
  attach(address: string): ChainlinkUSDAdapter {
    return super.attach(address) as ChainlinkUSDAdapter;
  }
  connect(signer: Signer): ChainlinkUSDAdapter__factory {
    return super.connect(signer) as ChainlinkUSDAdapter__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ChainlinkUSDAdapter {
    return new Contract(address, _abi, signerOrProvider) as ChainlinkUSDAdapter;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_assetName",
        type: "string",
      },
      {
        internalType: "string",
        name: "_assetSymbol",
        type: "string",
      },
      {
        internalType: "address",
        name: "_asset",
        type: "address",
      },
      {
        internalType: "contract IChainlinkV3Aggregator",
        name: "_aggregator",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newPrice",
        type: "uint256",
      },
    ],
    name: "PriceUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "aggregator",
    outputs: [
      {
        internalType: "contract IChainlinkV3Aggregator",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "asset",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "assetName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "assetSymbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b5060405161072138038061072183398101604081905261002f9161020e565b6001600160a01b03821661005e5760405162461bcd60e51b815260040161005590610294565b60405180910390fd5b6001600160a01b0381166100845760405162461bcd60e51b8152600401610055906102bb565b83516100979060009060208701906100cd565b5082516100ab9060019060208601906100cd565b506001600160601b0319606092831b8116608052911b1660a052506103509050565b8280546100d9906102e7565b90600052602060002090601f0160209004810192826100fb5760008555610141565b82601f1061011457805160ff1916838001178555610141565b82800160010185558215610141579182015b82811115610141578251825591602001919060010190610126565b5061014d929150610151565b5090565b5b8082111561014d5760008155600101610152565b600082601f830112610176578081fd5b81516001600160401b038082111561019057610190610322565b604051601f8301601f19908116603f011681019082821181831017156101b8576101b8610322565b816040528381526020925086838588010111156101d3578485fd5b8491505b838210156101f457858201830151818301840152908201906101d7565b8382111561020457848385830101525b9695505050505050565b60008060008060808587031215610223578384fd5b84516001600160401b0380821115610239578586fd5b61024588838901610166565b9550602087015191508082111561025a578485fd5b5061026787828801610166565b935050604085015161027881610338565b606086015190925061028981610338565b939692955090935050565b6020808252600d908201526c1a5b9d985b1a5908185cdcd95d609a1b604082015260600190565b60208082526012908201527134b73b30b634b21030b3b3b932b3b0ba37b960711b604082015260600190565b6002810460018216806102fb57607f821691505b6020821081141561031c57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461034d57600080fd5b50565b60805160601c60a05160601c61039f61038260003960008181610144015261018f01526000610168015261039f6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063176de7a81461005c578063245a7bfc1461007a57806338d52e0f1461008f57806350d25bcd14610097578063c9230c5d146100ac575b600080fd5b6100646100b4565b60405161007191906102db565b60405180910390f35b610082610142565b60405161007191906102b1565b610082610166565b61009f61018a565b60405161007191906102d2565b610064610236565b600180546100c19061032e565b80601f01602080910402602001604051908101604052809291908181526020018280546100ed9061032e565b801561013a5780601f1061010f5761010080835404028352916020019161013a565b820191906000526020600020905b81548152906001019060200180831161011d57829003601f168201915b505050505081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156101f357600080fd5b505afa158015610207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022b9190610262565b509194505050505090565b600080546100c19061032e565b805169ffffffffffffffffffff8116811461025d57600080fd5b919050565b600080600080600060a08688031215610279578081fd5b61028286610243565b94506020860151935060408601519250606086015191506102a560808701610243565b90509295509295909350565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b90815260200190565b6000602080835283518082850152825b81811015610307578581018301518582016040015282016102eb565b818111156103185783604083870101525b50601f01601f1916929092016040019392505050565b60028104600182168061034257607f821691505b6020821081141561036357634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122012a89dd4370f025b5bf45d98622a2d212db880b706004d6674abc09f4da3849864736f6c63430008010033";
