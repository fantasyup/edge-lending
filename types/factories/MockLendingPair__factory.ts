/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { MockLendingPair } from "../MockLendingPair";

export class MockLendingPair__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockLendingPair> {
    return super.deploy(overrides || {}) as Promise<MockLendingPair>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockLendingPair {
    return super.attach(address) as MockLendingPair;
  }
  connect(signer: Signer): MockLendingPair__factory {
    return super.connect(signer) as MockLendingPair__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockLendingPair {
    return new Contract(address, _abi, signerOrProvider) as MockLendingPair;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0xded68028",
        type: "bytes32",
      },
    ],
    name: "c_0xded68028",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506102bd806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063544f60911461003b5780638340f54914610057575b600080fd5b610055600480360381019061005091906101a9565b610087565b005b610071600480360381019061006c919061015a565b61008a565b60405161007e91906101e1565b60405180910390f35b50565b60006100b87f70a9f5310a578166e011d47636056ebc10f8760f1fa075965df7dc735921707160001b610087565b6100e47f3f66525da1ced0b80a151d17607aab7c1656c8b46496055a7f1fdf4ed9b9d44360001b610087565b6101107f63ae44115babca3700a34ca2358b4b931d88c19960f73adb83f4c86ea73ee07860001b610087565b600190509392505050565b60008135905061012a81610242565b92915050565b60008135905061013f81610259565b92915050565b60008135905061015481610270565b92915050565b60008060006060848603121561016f57600080fd5b600061017d8682870161011b565b935050602061018e8682870161011b565b925050604061019f86828701610145565b9150509250925092565b6000602082840312156101bb57600080fd5b60006101c984828501610130565b91505092915050565b6101db81610238565b82525050565b60006020820190506101f660008301846101d2565b92915050565b600061020782610218565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b61024b816101fc565b811461025657600080fd5b50565b6102628161020e565b811461026d57600080fd5b50565b61027981610238565b811461028457600080fd5b5056fea2646970667358221220e688576085d8b82d64f59006fe71a21345fa267a838ddaf6f3543185925ab48b64736f6c63430008010033";
