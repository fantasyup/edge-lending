/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { MockBalancerVault } from "../MockBalancerVault";

export class MockBalancerVault__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockBalancerVault> {
    return super.deploy(overrides || {}) as Promise<MockBalancerVault>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockBalancerVault {
    return super.attach(address) as MockBalancerVault;
  }
  connect(signer: Signer): MockBalancerVault__factory {
    return super.connect(signer) as MockBalancerVault__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockBalancerVault {
    return new Contract(address, _abi, signerOrProvider) as MockBalancerVault;
  }
}

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "poolId",
            type: "bytes32",
          },
          {
            internalType: "enum IBalancerVaultV2.SwapKind",
            name: "kind",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "assetIn",
            type: "address",
          },
          {
            internalType: "address",
            name: "assetOut",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "userData",
            type: "bytes",
          },
        ],
        internalType: "struct IBalancerVaultV2.SingleSwap",
        name: "singleSwap",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "bool",
            name: "fromInternalBalance",
            type: "bool",
          },
          {
            internalType: "address payable",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "bool",
            name: "toInternalBalance",
            type: "bool",
          },
        ],
        internalType: "struct IBalancerVaultV2.FundManagement",
        name: "funds",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "swap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506104a2806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806352bbbe2914610030575b600080fd5b61004361003e3660046102df565b610059565b60405161005091906103f6565b60405180910390f35b6040808501516060860151855192516323b872dd60e01b81526000936001600160a01b038416916323b872dd916100969130908a906004016103d2565b602060405180830381600087803b1580156100b057600080fd5b505af11580156100c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e891906102bc565b506040516340c10f1960e01b81526001600160a01b038216906340c10f199061011790309089906004016103b9565b600060405180830381600087803b15801561013157600080fd5b505af1158015610145573d6000803e3d6000fd5b505050604080880151905163a9059cbb60e01b81526001600160a01b038416925063a9059cbb9161017a9189906004016103b9565b602060405180830381600087803b15801561019457600080fd5b505af11580156101a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101cc91906102bc565b50939695505050505050565b80356101e381610446565b919050565b600082601f8301126101f8578081fd5b813567ffffffffffffffff81111561021257610212610430565b610225601f8201601f19166020016103ff565b818152846020838601011115610239578283fd5b816020850160208301379081016020019190915292915050565b600060808284031215610264578081fd5b61026e60806103ff565b9050813561027b81610446565b8152602082013561028b8161045e565b6020820152604082013561029e81610446565b604082015260608201356102b18161045e565b606082015292915050565b6000602082840312156102cd578081fd5b81516102d88161045e565b9392505050565b60008060008060e085870312156102f4578283fd5b843567ffffffffffffffff8082111561030b578485fd5b9086019060c0828903121561031e578485fd5b61032860c06103ff565b8235815260208301356002811061033d578687fd5b602082015261034e604084016101d8565b604082015261035f606084016101d8565b60608201526080830135608082015260a08301358281111561037f578687fd5b61038b8a8286016101e8565b60a0830152508096505050506103a48660208701610253565b939693955050505060a08201359160c0013590565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b90815260200190565b604051601f8201601f1916810167ffffffffffffffff8111828210171561042857610428610430565b604052919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461045b57600080fd5b50565b801515811461045b57600080fdfea2646970667358221220d116dabc98a40b63561183d987bce869249a9a6af203f08ff05737e848f0dc7564736f6c63430008010033";
