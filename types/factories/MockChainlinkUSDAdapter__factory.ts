/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { MockChainlinkUSDAdapter } from "../MockChainlinkUSDAdapter";

export class MockChainlinkUSDAdapter__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockChainlinkUSDAdapter> {
    return super.deploy(overrides || {}) as Promise<MockChainlinkUSDAdapter>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockChainlinkUSDAdapter {
    return super.attach(address) as MockChainlinkUSDAdapter;
  }
  connect(signer: Signer): MockChainlinkUSDAdapter__factory {
    return super.connect(signer) as MockChainlinkUSDAdapter__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockChainlinkUSDAdapter {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockChainlinkUSDAdapter;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newPrice",
        type: "uint256",
      },
    ],
    name: "PriceUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "getPriceInUSD",
    outputs: [
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "viewPriceInUSD",
    outputs: [
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060e98061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063e1aa6036146037578063f55fa17f146051575b600080fd5b603d606b565b604051604891906090565b60405180910390f35b60576077565b604051606291906090565b60405180910390f35b60006305f5e100905090565b60006305f5e100905090565b608a8160a9565b82525050565b600060208201905060a360008301846083565b92915050565b600081905091905056fea2646970667358221220c5cd632454fc22b9ee86ed9b3a8f51f73e410ee4bd022e5a9df02738154b719b64736f6c63430008010033";
