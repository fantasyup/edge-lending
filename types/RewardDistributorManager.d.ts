/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RewardDistributorManagerInterface extends ethers.utils.Interface {
  functions: {
    "acceptOwnerTransfer()": FunctionFragment;
    "accumulateRewards(address,address,uint256)": FunctionFragment;
    "activateReward(address)": FunctionFragment;
    "approvedDistributors(address)": FunctionFragment;
    "commitOwnerTransfer(address)": FunctionFragment;
    "getCodeAddress()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "removeReward(address,address)": FunctionFragment;
    "setDistributorStatus(address,bool)": FunctionFragment;
    "tokenRewardToDistributors(address,uint256)": FunctionFragment;
    "updateCode(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOwnerTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accumulateRewards",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "activateReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedDistributors",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "commitOwnerTransfer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCodeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeReward",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributorStatus",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenRewardToDistributors",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "updateCode", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnerTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accumulateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedDistributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitOwnerTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCodeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDistributorStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenRewardToDistributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateCode", data: BytesLike): Result;

  events: {
    "AddReward(address,address,uint256)": EventFragment;
    "ApprovedDistributor(address,uint256)": EventFragment;
    "CodeUpdated(bytes32,address)": EventFragment;
    "Initialized(address,uint256)": EventFragment;
    "OwnershipAccepted(address,uint256)": EventFragment;
    "RemoveReward(address,address,uint256)": EventFragment;
    "TransferControl(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovedDistributor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CodeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferControl"): EventFragment;
}

export class RewardDistributorManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RewardDistributorManagerInterface;

  functions: {
    acceptOwnerTransfer(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "acceptOwnerTransfer()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    accumulateRewards(
      _from: string,
      _to: string,
      _balance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "accumulateRewards(address,address,uint256)"(
      _from: string,
      _to: string,
      _balance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    activateReward(
      _tokenAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "activateReward(address)"(
      _tokenAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approvedDistributors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "approvedDistributors(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    commitOwnerTransfer(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "commitOwnerTransfer(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCodeAddress(
      overrides?: CallOverrides
    ): Promise<[string] & { codeAddress: string }>;

    "getCodeAddress()"(
      overrides?: CallOverrides
    ): Promise<[string] & { codeAddress: string }>;

    initialize(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<[string]>;

    removeReward(
      _tokenAddr: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeReward(address,address)"(
      _tokenAddr: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDistributorStatus(
      _distributor: string,
      _approve: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setDistributorStatus(address,bool)"(
      _distributor: string,
      _approve: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenRewardToDistributors(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "tokenRewardToDistributors(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    updateCode(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateCode(address)"(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOwnerTransfer(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "acceptOwnerTransfer()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  accumulateRewards(
    _from: string,
    _to: string,
    _balance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "accumulateRewards(address,address,uint256)"(
    _from: string,
    _to: string,
    _balance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  activateReward(
    _tokenAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "activateReward(address)"(
    _tokenAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approvedDistributors(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "approvedDistributors(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  commitOwnerTransfer(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "commitOwnerTransfer(address)"(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCodeAddress(overrides?: CallOverrides): Promise<string>;

  "getCodeAddress()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

  removeReward(
    _tokenAddr: string,
    _distributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeReward(address,address)"(
    _tokenAddr: string,
    _distributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDistributorStatus(
    _distributor: string,
    _approve: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setDistributorStatus(address,bool)"(
    _distributor: string,
    _approve: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenRewardToDistributors(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "tokenRewardToDistributors(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  updateCode(
    newAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateCode(address)"(
    newAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnerTransfer(overrides?: CallOverrides): Promise<void>;

    "acceptOwnerTransfer()"(overrides?: CallOverrides): Promise<void>;

    accumulateRewards(
      _from: string,
      _to: string,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "accumulateRewards(address,address,uint256)"(
      _from: string,
      _to: string,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    activateReward(
      _tokenAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "activateReward(address)"(
      _tokenAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approvedDistributors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approvedDistributors(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    commitOwnerTransfer(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "commitOwnerTransfer(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getCodeAddress(overrides?: CallOverrides): Promise<string>;

    "getCodeAddress()"(overrides?: CallOverrides): Promise<string>;

    initialize(_owner: string, overrides?: CallOverrides): Promise<void>;

    "initialize(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

    removeReward(
      _tokenAddr: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeReward(address,address)"(
      _tokenAddr: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDistributorStatus(
      _distributor: string,
      _approve: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDistributorStatus(address,bool)"(
      _distributor: string,
      _approve: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenRewardToDistributors(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "tokenRewardToDistributors(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    updateCode(newAddress: string, overrides?: CallOverrides): Promise<void>;

    "updateCode(address)"(
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AddReward(
      tokenAddr: null,
      distributor: null,
      timestamp: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { tokenAddr: string; distributor: string; timestamp: BigNumber }
    >;

    ApprovedDistributor(
      distributor: null,
      timestamp: null
    ): TypedEventFilter<
      [string, BigNumber],
      { distributor: string; timestamp: BigNumber }
    >;

    CodeUpdated(
      uuid: null,
      codeAddress: null
    ): TypedEventFilter<
      [string, string],
      { uuid: string; codeAddress: string }
    >;

    Initialized(
      owner: null,
      timestamp: null
    ): TypedEventFilter<
      [string, BigNumber],
      { owner: string; timestamp: BigNumber }
    >;

    OwnershipAccepted(
      newOwner: null,
      timestamp: null
    ): TypedEventFilter<
      [string, BigNumber],
      { newOwner: string; timestamp: BigNumber }
    >;

    RemoveReward(
      tokenAddr: null,
      distributor: null,
      timestamp: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { tokenAddr: string; distributor: string; timestamp: BigNumber }
    >;

    TransferControl(
      _newTeam: null,
      timestamp: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _newTeam: string; timestamp: BigNumber }
    >;
  };

  estimateGas: {
    acceptOwnerTransfer(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "acceptOwnerTransfer()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    accumulateRewards(
      _from: string,
      _to: string,
      _balance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "accumulateRewards(address,address,uint256)"(
      _from: string,
      _to: string,
      _balance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    activateReward(
      _tokenAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "activateReward(address)"(
      _tokenAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approvedDistributors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "approvedDistributors(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    commitOwnerTransfer(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "commitOwnerTransfer(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCodeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "getCodeAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeReward(
      _tokenAddr: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeReward(address,address)"(
      _tokenAddr: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDistributorStatus(
      _distributor: string,
      _approve: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setDistributorStatus(address,bool)"(
      _distributor: string,
      _approve: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenRewardToDistributors(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenRewardToDistributors(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateCode(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateCode(address)"(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnerTransfer(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "acceptOwnerTransfer()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    accumulateRewards(
      _from: string,
      _to: string,
      _balance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "accumulateRewards(address,address,uint256)"(
      _from: string,
      _to: string,
      _balance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    activateReward(
      _tokenAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "activateReward(address)"(
      _tokenAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approvedDistributors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "approvedDistributors(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    commitOwnerTransfer(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "commitOwnerTransfer(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCodeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getCodeAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeReward(
      _tokenAddr: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeReward(address,address)"(
      _tokenAddr: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDistributorStatus(
      _distributor: string,
      _approve: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setDistributorStatus(address,bool)"(
      _distributor: string,
      _approve: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenRewardToDistributors(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenRewardToDistributors(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateCode(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateCode(address)"(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
