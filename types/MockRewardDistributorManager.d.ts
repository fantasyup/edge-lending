/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MockRewardDistributorManagerInterface extends ethers.utils.Interface {
  functions: {
    "accumulateRewards(address,address,uint256)": FunctionFragment;
    "addReward(address,address)": FunctionFragment;
    "removeReward(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accumulateRewards",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addReward",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeReward",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "accumulateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeReward",
    data: BytesLike
  ): Result;

  events: {
    "AddReward(address,address,uint256)": EventFragment;
    "ApprovedDistribution(address,uint256)": EventFragment;
    "OwnershipAccepted(address,uint256)": EventFragment;
    "RemoveReward(address,address,uint256)": EventFragment;
    "TransferControl(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovedDistribution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferControl"): EventFragment;
}

export class MockRewardDistributorManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockRewardDistributorManagerInterface;

  functions: {
    accumulateRewards(
      _from: string,
      _to: string,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "accumulateRewards(address,address,uint256)"(
      _from: string,
      _to: string,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    addReward(
      _tokenAddr: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "addReward(address,address)"(
      _tokenAddr: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    removeReward(
      _tokenAddr: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "removeReward(address,address)"(
      _tokenAddr: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  accumulateRewards(
    _from: string,
    _to: string,
    _balance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  "accumulateRewards(address,address,uint256)"(
    _from: string,
    _to: string,
    _balance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  addReward(
    _tokenAddr: string,
    _distributor: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "addReward(address,address)"(
    _tokenAddr: string,
    _distributor: string,
    overrides?: CallOverrides
  ): Promise<void>;

  removeReward(
    _tokenAddr: string,
    _distributor: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "removeReward(address,address)"(
    _tokenAddr: string,
    _distributor: string,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    accumulateRewards(
      _from: string,
      _to: string,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "accumulateRewards(address,address,uint256)"(
      _from: string,
      _to: string,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addReward(
      _tokenAddr: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addReward(address,address)"(
      _tokenAddr: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeReward(
      _tokenAddr: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeReward(address,address)"(
      _tokenAddr: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AddReward(
      tokenAddr: null,
      distributor: null,
      timestamp: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { tokenAddr: string; distributor: string; timestamp: BigNumber }
    >;

    ApprovedDistribution(
      distributor: null,
      timestamp: null
    ): TypedEventFilter<
      [string, BigNumber],
      { distributor: string; timestamp: BigNumber }
    >;

    OwnershipAccepted(
      newOwner: null,
      timestamp: null
    ): TypedEventFilter<
      [string, BigNumber],
      { newOwner: string; timestamp: BigNumber }
    >;

    RemoveReward(
      tokenAddr: null,
      distributor: null,
      timestamp: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { tokenAddr: string; distributor: string; timestamp: BigNumber }
    >;

    TransferControl(
      _newTeam: null,
      timestamp: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _newTeam: string; timestamp: BigNumber }
    >;
  };

  estimateGas: {
    accumulateRewards(
      _from: string,
      _to: string,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "accumulateRewards(address,address,uint256)"(
      _from: string,
      _to: string,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addReward(
      _tokenAddr: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addReward(address,address)"(
      _tokenAddr: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeReward(
      _tokenAddr: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "removeReward(address,address)"(
      _tokenAddr: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accumulateRewards(
      _from: string,
      _to: string,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accumulateRewards(address,address,uint256)"(
      _from: string,
      _to: string,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addReward(
      _tokenAddr: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "addReward(address,address)"(
      _tokenAddr: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeReward(
      _tokenAddr: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "removeReward(address,address)"(
      _tokenAddr: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
