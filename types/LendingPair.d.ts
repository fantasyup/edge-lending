/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LendingPairInterface extends ethers.utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "accountInterestIndex(address)": FunctionFragment;
    "accrueInterest()": FunctionFragment;
    "asset()": FunctionFragment;
    "borrow(uint256,address)": FunctionFragment;
    "borrowBalanceCurrent(address)": FunctionFragment;
    "borrowBalancePrior(address)": FunctionFragment;
    "borrowIndex()": FunctionFragment;
    "calcBorrowLimit(uint256)": FunctionFragment;
    "calcCollateralRequired(uint256)": FunctionFragment;
    "calculateLiquidationFee(uint256)": FunctionFragment;
    "collateralAsset()": FunctionFragment;
    "collateralFactor()": FunctionFragment;
    "collateralOfAccount(address)": FunctionFragment;
    "debtToken()": FunctionFragment;
    "depositBorrowAsset(address,uint256)": FunctionFragment;
    "depositCollateral(address,uint256)": FunctionFragment;
    "exchangeRateCurrent()": FunctionFragment;
    "feeWithdrawalAddr()": FunctionFragment;
    "getBorrowLimit(address)": FunctionFragment;
    "getBorrowLimitInUSD(address)": FunctionFragment;
    "getCashPrior()": FunctionFragment;
    "getMaxWithdrawAllowed(address)": FunctionFragment;
    "getPriceOfBorrowAsset()": FunctionFragment;
    "getPriceOfCollateral()": FunctionFragment;
    "getPriceOfToken(address,uint256)": FunctionFragment;
    "getTotalAvailableCollateralValue(address)": FunctionFragment;
    "getTotalAvailableCollateralValueInUSD(address)": FunctionFragment;
    "initialize(string,string,address,address,tuple,address,address,address)": FunctionFragment;
    "interestRate()": FunctionFragment;
    "liquidate(address)": FunctionFragment;
    "liquidationFee()": FunctionFragment;
    "name()": FunctionFragment;
    "oracle()": FunctionFragment;
    "pause(uint8)": FunctionFragment;
    "pauseGuardian()": FunctionFragment;
    "pauseStatus(uint8)": FunctionFragment;
    "protocolLiquidationFeeShare()": FunctionFragment;
    "redeem(address,uint256)": FunctionFragment;
    "repay(uint256,address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalBorrows()": FunctionFragment;
    "totalReserves()": FunctionFragment;
    "unpause(uint8)": FunctionFragment;
    "vault()": FunctionFragment;
    "edge(uint8[],bytes[])": FunctionFragment;
    "withdrawCollateral(uint256)": FunctionFragment;
    "withdrawFees(uint256)": FunctionFragment;
    "wrappedCollateralAsset()": FunctionFragment;
    "wrapperBorrowedAsset()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accountInterestIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "accrueInterest",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowBalanceCurrent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowBalancePrior",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcBorrowLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcCollateralRequired",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateLiquidationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralOfAccount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "debtToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositBorrowAsset",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateral",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRateCurrent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeWithdrawalAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowLimit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowLimitInUSD",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCashPrior",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxWithdrawAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceOfBorrowAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceOfCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceOfToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAvailableCollateralValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAvailableCollateralValueInUSD",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      string,
      {
        initialExchangeRateMantissa: BigNumberish;
        reserveFactorMantissa: BigNumberish;
        collateralFactor: BigNumberish;
        wrappedBorrowAsset: string;
        liquidationFee: BigNumberish;
        debtToken: string;
      },
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "interestRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "liquidate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "liquidationFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "pauseGuardian",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pauseStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolLiquidationFeeShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBorrows",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unpause",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "edge",
    values: [BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedCollateralAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wrapperBorrowedAsset",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accountInterestIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accrueInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowBalanceCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowBalancePrior",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcBorrowLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcCollateralRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateLiquidationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralOfAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositBorrowAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRateCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeWithdrawalAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowLimitInUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCashPrior",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxWithdrawAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceOfBorrowAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceOfCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceOfToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAvailableCollateralValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAvailableCollateralValueInUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolLiquidationFeeShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "edge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedCollateralAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrapperBorrowedAsset",
    data: BytesLike
  ): Result;

  events: {
    "ActionPaused(uint8,uint256)": EventFragment;
    "ActionUnPaused(uint8,uint256)": EventFragment;
    "Borrow(address,uint256)": EventFragment;
    "Deposit(address,address,address,address,uint256)": EventFragment;
    "FlashLoan(address,address,address,uint256,uint256)": EventFragment;
    "Initialized(address,address,address,address)": EventFragment;
    "InterestAccrued(address,uint256,uint256,uint256,uint256)": EventFragment;
    "InterestShortCircuit(uint256)": EventFragment;
    "Liquidate(address,address,address,uint256,address)": EventFragment;
    "Redeem(address,address,address,address,uint256,uint256)": EventFragment;
    "Repay(address,address,address,address,uint256)": EventFragment;
    "ReserveWithdraw(address,uint256)": EventFragment;
    "WithdrawCollateral(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActionPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ActionUnPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlashLoan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterestAccrued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterestShortCircuit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawCollateral"): EventFragment;
}

export class LendingPair extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LendingPairInterface;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    "VERSION()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    accountInterestIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "accountInterestIndex(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    accrueInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "accrueInterest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<[string]>;

    "asset()"(overrides?: CallOverrides): Promise<[string]>;

    borrow(
      _amountToBorrow: BigNumberish,
      _debtOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "borrow(uint256,address)"(
      _amountToBorrow: BigNumberish,
      _debtOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowBalanceCurrent(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "borrowBalanceCurrent(address)"(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowBalancePrior(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    "borrowBalancePrior(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    borrowIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    "borrowIndex()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    calcBorrowLimit(
      _collateralValueInUSD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcBorrowLimit(uint256)"(
      _collateralValueInUSD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcCollateralRequired(
      _borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcCollateralRequired(uint256)"(
      _borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateLiquidationFee(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fee: BigNumber }>;

    "calculateLiquidationFee(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fee: BigNumber }>;

    collateralAsset(overrides?: CallOverrides): Promise<[string]>;

    "collateralAsset()"(overrides?: CallOverrides): Promise<[string]>;

    collateralFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "collateralFactor()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    collateralOfAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "collateralOfAccount(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    debtToken(overrides?: CallOverrides): Promise<[string]>;

    "debtToken()"(overrides?: CallOverrides): Promise<[string]>;

    depositBorrowAsset(
      _tokenReceipeint: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositBorrowAsset(address,uint256)"(
      _tokenReceipeint: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositCollateral(
      _tokenRecipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositCollateral(address,uint256)"(
      _tokenRecipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeRateCurrent(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "exchangeRateCurrent()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeWithdrawalAddr(overrides?: CallOverrides): Promise<[string]>;

    "feeWithdrawalAddr()"(overrides?: CallOverrides): Promise<[string]>;

    getBorrowLimit(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getBorrowLimit(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBorrowLimitInUSD(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getBorrowLimitInUSD(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCashPrior(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getCashPrior()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMaxWithdrawAllowed(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "getMaxWithdrawAllowed(address)"(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPriceOfBorrowAsset(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getPriceOfBorrowAsset()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPriceOfCollateral(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getPriceOfCollateral()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPriceOfToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPriceOfToken(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalAvailableCollateralValue(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTotalAvailableCollateralValue(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalAvailableCollateralValueInUSD(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTotalAvailableCollateralValueInUSD(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _name: string,
      _symbol: string,
      _asset: string,
      _collateralAsset: string,
      borrowConfig: {
        initialExchangeRateMantissa: BigNumberish;
        reserveFactorMantissa: BigNumberish;
        collateralFactor: BigNumberish;
        wrappedBorrowAsset: string;
        liquidationFee: BigNumberish;
        debtToken: string;
      },
      _wrappedCollateralAsset: string,
      _interestRate: string,
      _pauseGuardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(string,string,address,address,(uint256,uint256,uint256,address,uint256,address),address,address,address)"(
      _name: string,
      _symbol: string,
      _asset: string,
      _collateralAsset: string,
      borrowConfig: {
        initialExchangeRateMantissa: BigNumberish;
        reserveFactorMantissa: BigNumberish;
        collateralFactor: BigNumberish;
        wrappedBorrowAsset: string;
        liquidationFee: BigNumberish;
        debtToken: string;
      },
      _wrappedCollateralAsset: string,
      _interestRate: string,
      _pauseGuardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    interestRate(overrides?: CallOverrides): Promise<[string]>;

    "interestRate()"(overrides?: CallOverrides): Promise<[string]>;

    liquidate(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "liquidate(address)"(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "liquidationFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    "oracle()"(overrides?: CallOverrides): Promise<[string]>;

    pause(
      action: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pause(uint8)"(
      action: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseGuardian(overrides?: CallOverrides): Promise<[string]>;

    "pauseGuardian()"(overrides?: CallOverrides): Promise<[string]>;

    pauseStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "pauseStatus(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    protocolLiquidationFeeShare(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "protocolLiquidationFeeShare()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    redeem(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeem(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repay(
      _repayAmount: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "repay(uint256,address)"(
      _repayAmount: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    totalBorrows(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalBorrows()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalReserves(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalReserves()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(
      action: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unpause(uint8)"(
      action: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    "vault()"(overrides?: CallOverrides): Promise<[string]>;

    edge(
      actions: BigNumberish[],
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "edge(uint8[],bytes[])"(
      actions: BigNumberish[],
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawCollateral(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawCollateral(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFees(
      _toWithdraw: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawFees(uint256)"(
      _toWithdraw: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrappedCollateralAsset(overrides?: CallOverrides): Promise<[string]>;

    "wrappedCollateralAsset()"(overrides?: CallOverrides): Promise<[string]>;

    wrapperBorrowedAsset(overrides?: CallOverrides): Promise<[string]>;

    "wrapperBorrowedAsset()"(overrides?: CallOverrides): Promise<[string]>;
  };

  VERSION(overrides?: CallOverrides): Promise<BigNumber>;

  "VERSION()"(overrides?: CallOverrides): Promise<BigNumber>;

  accountInterestIndex(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "accountInterestIndex(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  accrueInterest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "accrueInterest()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  "asset()"(overrides?: CallOverrides): Promise<string>;

  borrow(
    _amountToBorrow: BigNumberish,
    _debtOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "borrow(uint256,address)"(
    _amountToBorrow: BigNumberish,
    _debtOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowBalanceCurrent(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "borrowBalanceCurrent(address)"(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowBalancePrior(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "borrowBalancePrior(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrowIndex(overrides?: CallOverrides): Promise<BigNumber>;

  "borrowIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

  calcBorrowLimit(
    _collateralValueInUSD: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcBorrowLimit(uint256)"(
    _collateralValueInUSD: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcCollateralRequired(
    _borrowAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcCollateralRequired(uint256)"(
    _borrowAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateLiquidationFee(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateLiquidationFee(uint256)"(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateralAsset(overrides?: CallOverrides): Promise<string>;

  "collateralAsset()"(overrides?: CallOverrides): Promise<string>;

  collateralFactor(overrides?: CallOverrides): Promise<BigNumber>;

  "collateralFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

  collateralOfAccount(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "collateralOfAccount(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  debtToken(overrides?: CallOverrides): Promise<string>;

  "debtToken()"(overrides?: CallOverrides): Promise<string>;

  depositBorrowAsset(
    _tokenReceipeint: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositBorrowAsset(address,uint256)"(
    _tokenReceipeint: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositCollateral(
    _tokenRecipient: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositCollateral(address,uint256)"(
    _tokenRecipient: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeRateCurrent(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "exchangeRateCurrent()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeWithdrawalAddr(overrides?: CallOverrides): Promise<string>;

  "feeWithdrawalAddr()"(overrides?: CallOverrides): Promise<string>;

  getBorrowLimit(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getBorrowLimit(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBorrowLimitInUSD(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getBorrowLimitInUSD(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCashPrior(overrides?: CallOverrides): Promise<BigNumber>;

  "getCashPrior()"(overrides?: CallOverrides): Promise<BigNumber>;

  getMaxWithdrawAllowed(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "getMaxWithdrawAllowed(address)"(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPriceOfBorrowAsset(overrides?: CallOverrides): Promise<BigNumber>;

  "getPriceOfBorrowAsset()"(overrides?: CallOverrides): Promise<BigNumber>;

  getPriceOfCollateral(overrides?: CallOverrides): Promise<BigNumber>;

  "getPriceOfCollateral()"(overrides?: CallOverrides): Promise<BigNumber>;

  getPriceOfToken(
    _token: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPriceOfToken(address,uint256)"(
    _token: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalAvailableCollateralValue(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTotalAvailableCollateralValue(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalAvailableCollateralValueInUSD(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTotalAvailableCollateralValueInUSD(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _name: string,
    _symbol: string,
    _asset: string,
    _collateralAsset: string,
    borrowConfig: {
      initialExchangeRateMantissa: BigNumberish;
      reserveFactorMantissa: BigNumberish;
      collateralFactor: BigNumberish;
      wrappedBorrowAsset: string;
      liquidationFee: BigNumberish;
      debtToken: string;
    },
    _wrappedCollateralAsset: string,
    _interestRate: string,
    _pauseGuardian: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(string,string,address,address,(uint256,uint256,uint256,address,uint256,address),address,address,address)"(
    _name: string,
    _symbol: string,
    _asset: string,
    _collateralAsset: string,
    borrowConfig: {
      initialExchangeRateMantissa: BigNumberish;
      reserveFactorMantissa: BigNumberish;
      collateralFactor: BigNumberish;
      wrappedBorrowAsset: string;
      liquidationFee: BigNumberish;
      debtToken: string;
    },
    _wrappedCollateralAsset: string,
    _interestRate: string,
    _pauseGuardian: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  interestRate(overrides?: CallOverrides): Promise<string>;

  "interestRate()"(overrides?: CallOverrides): Promise<string>;

  liquidate(
    _borrower: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "liquidate(address)"(
    _borrower: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

  "liquidationFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  oracle(overrides?: CallOverrides): Promise<string>;

  "oracle()"(overrides?: CallOverrides): Promise<string>;

  pause(
    action: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pause(uint8)"(
    action: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseGuardian(overrides?: CallOverrides): Promise<string>;

  "pauseGuardian()"(overrides?: CallOverrides): Promise<string>;

  pauseStatus(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "pauseStatus(uint8)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  protocolLiquidationFeeShare(overrides?: CallOverrides): Promise<BigNumber>;

  "protocolLiquidationFeeShare()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  redeem(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeem(address,uint256)"(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repay(
    _repayAmount: BigNumberish,
    _beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "repay(uint256,address)"(
    _repayAmount: BigNumberish,
    _beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalBorrows(overrides?: CallOverrides): Promise<BigNumber>;

  "totalBorrows()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalReserves(overrides?: CallOverrides): Promise<BigNumber>;

  "totalReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    action: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unpause(uint8)"(
    action: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  "vault()"(overrides?: CallOverrides): Promise<string>;

  edge(
    actions: BigNumberish[],
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "edge(uint8[],bytes[])"(
    actions: BigNumberish[],
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawCollateral(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawCollateral(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFees(
    _toWithdraw: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawFees(uint256)"(
    _toWithdraw: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrappedCollateralAsset(overrides?: CallOverrides): Promise<string>;

  "wrappedCollateralAsset()"(overrides?: CallOverrides): Promise<string>;

  wrapperBorrowedAsset(overrides?: CallOverrides): Promise<string>;

  "wrapperBorrowedAsset()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    "VERSION()"(overrides?: CallOverrides): Promise<BigNumber>;

    accountInterestIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "accountInterestIndex(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accrueInterest(overrides?: CallOverrides): Promise<void>;

    "accrueInterest()"(overrides?: CallOverrides): Promise<void>;

    asset(overrides?: CallOverrides): Promise<string>;

    "asset()"(overrides?: CallOverrides): Promise<string>;

    borrow(
      _amountToBorrow: BigNumberish,
      _debtOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "borrow(uint256,address)"(
      _amountToBorrow: BigNumberish,
      _debtOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowBalanceCurrent(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrowBalanceCurrent(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowBalancePrior(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrowBalancePrior(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    calcBorrowLimit(
      _collateralValueInUSD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcBorrowLimit(uint256)"(
      _collateralValueInUSD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcCollateralRequired(
      _borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcCollateralRequired(uint256)"(
      _borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateLiquidationFee(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateLiquidationFee(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralAsset(overrides?: CallOverrides): Promise<string>;

    "collateralAsset()"(overrides?: CallOverrides): Promise<string>;

    collateralFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    collateralOfAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collateralOfAccount(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtToken(overrides?: CallOverrides): Promise<string>;

    "debtToken()"(overrides?: CallOverrides): Promise<string>;

    depositBorrowAsset(
      _tokenReceipeint: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositBorrowAsset(address,uint256)"(
      _tokenReceipeint: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositCollateral(
      _tokenRecipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositCollateral(address,uint256)"(
      _tokenRecipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    exchangeRateCurrent(overrides?: CallOverrides): Promise<BigNumber>;

    "exchangeRateCurrent()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeWithdrawalAddr(overrides?: CallOverrides): Promise<string>;

    "feeWithdrawalAddr()"(overrides?: CallOverrides): Promise<string>;

    getBorrowLimit(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBorrowLimit(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBorrowLimitInUSD(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBorrowLimitInUSD(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCashPrior(overrides?: CallOverrides): Promise<BigNumber>;

    "getCashPrior()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxWithdrawAllowed(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMaxWithdrawAllowed(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceOfBorrowAsset(overrides?: CallOverrides): Promise<BigNumber>;

    "getPriceOfBorrowAsset()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceOfCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    "getPriceOfCollateral()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceOfToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriceOfToken(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalAvailableCollateralValue(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalAvailableCollateralValue(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalAvailableCollateralValueInUSD(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalAvailableCollateralValueInUSD(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _name: string,
      _symbol: string,
      _asset: string,
      _collateralAsset: string,
      borrowConfig: {
        initialExchangeRateMantissa: BigNumberish;
        reserveFactorMantissa: BigNumberish;
        collateralFactor: BigNumberish;
        wrappedBorrowAsset: string;
        liquidationFee: BigNumberish;
        debtToken: string;
      },
      _wrappedCollateralAsset: string,
      _interestRate: string,
      _pauseGuardian: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(string,string,address,address,(uint256,uint256,uint256,address,uint256,address),address,address,address)"(
      _name: string,
      _symbol: string,
      _asset: string,
      _collateralAsset: string,
      borrowConfig: {
        initialExchangeRateMantissa: BigNumberish;
        reserveFactorMantissa: BigNumberish;
        collateralFactor: BigNumberish;
        wrappedBorrowAsset: string;
        liquidationFee: BigNumberish;
        debtToken: string;
      },
      _wrappedCollateralAsset: string,
      _interestRate: string,
      _pauseGuardian: string,
      overrides?: CallOverrides
    ): Promise<void>;

    interestRate(overrides?: CallOverrides): Promise<string>;

    "interestRate()"(overrides?: CallOverrides): Promise<string>;

    liquidate(_borrower: string, overrides?: CallOverrides): Promise<void>;

    "liquidate(address)"(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidationFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;

    "oracle()"(overrides?: CallOverrides): Promise<string>;

    pause(action: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "pause(uint8)"(
      action: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pauseGuardian(overrides?: CallOverrides): Promise<string>;

    "pauseGuardian()"(overrides?: CallOverrides): Promise<string>;

    pauseStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "pauseStatus(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    protocolLiquidationFeeShare(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolLiquidationFeeShare()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "redeem(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    repay(
      _repayAmount: BigNumberish,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "repay(uint256,address)"(
      _repayAmount: BigNumberish,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalBorrows(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBorrows()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "totalReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(action: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "unpause(uint8)"(
      action: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;

    "vault()"(overrides?: CallOverrides): Promise<string>;

    edge(
      actions: BigNumberish[],
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "edge(uint8[],bytes[])"(
      actions: BigNumberish[],
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawCollateral(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawCollateral(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFees(
      _toWithdraw: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawFees(uint256)"(
      _toWithdraw: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wrappedCollateralAsset(overrides?: CallOverrides): Promise<string>;

    "wrappedCollateralAsset()"(overrides?: CallOverrides): Promise<string>;

    wrapperBorrowedAsset(overrides?: CallOverrides): Promise<string>;

    "wrapperBorrowedAsset()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    ActionPaused(
      action: null,
      timestamp: null
    ): TypedEventFilter<
      [number, BigNumber],
      { action: number; timestamp: BigNumber }
    >;

    ActionUnPaused(
      action: null,
      timestamp: null
    ): TypedEventFilter<
      [number, BigNumber],
      { action: number; timestamp: BigNumber }
    >;

    Borrow(
      borrower: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { borrower: string; amount: BigNumber }
    >;

    Deposit(
      pair: string | null,
      asset: string | null,
      tokenReceipeint: string | null,
      user: null,
      amount: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber],
      {
        pair: string;
        asset: string;
        tokenReceipeint: string;
        user: string;
        amount: BigNumber;
      }
    >;

    FlashLoan(
      target: string | null,
      initiator: string | null,
      asset: string | null,
      amount: null,
      premium: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        target: string;
        initiator: string;
        asset: string;
        amount: BigNumber;
        premium: BigNumber;
      }
    >;

    Initialized(
      pair: string | null,
      asset: string | null,
      collateralAsset: string | null,
      pauseGuardian: null
    ): TypedEventFilter<
      [string, string, string, string],
      {
        pair: string;
        asset: string;
        collateralAsset: string;
        pauseGuardian: string;
      }
    >;

    InterestAccrued(
      pair: string | null,
      accrualBlockNumber: null,
      borrowIndex: null,
      totalBorrows: null,
      totalReserves: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        pair: string;
        accrualBlockNumber: BigNumber;
        borrowIndex: BigNumber;
        totalBorrows: BigNumber;
        totalReserves: BigNumber;
      }
    >;

    InterestShortCircuit(
      blockNumber: null
    ): TypedEventFilter<[BigNumber], { blockNumber: BigNumber }>;

    Liquidate(
      pair: string | null,
      asset: string | null,
      user: string | null,
      liquidatedCollateralAmount: null,
      liquidator: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string],
      {
        pair: string;
        asset: string;
        user: string;
        liquidatedCollateralAmount: BigNumber;
        liquidator: string;
      }
    >;

    Redeem(
      pair: string | null,
      asset: string | null,
      user: string | null,
      to: null,
      amount: null,
      amountofWrappedBurned: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, BigNumber],
      {
        pair: string;
        asset: string;
        user: string;
        to: string;
        amount: BigNumber;
        amountofWrappedBurned: BigNumber;
      }
    >;

    Repay(
      pair: string | null,
      asset: string | null,
      beneficiary: string | null,
      repayer: null,
      amount: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber],
      {
        pair: string;
        asset: string;
        beneficiary: string;
        repayer: string;
        amount: BigNumber;
      }
    >;

    ReserveWithdraw(
      user: null,
      shares: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; shares: BigNumber }
    >;

    WithdrawCollateral(
      account: null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    "VERSION()"(overrides?: CallOverrides): Promise<BigNumber>;

    accountInterestIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "accountInterestIndex(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accrueInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "accrueInterest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    "asset()"(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      _amountToBorrow: BigNumberish,
      _debtOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "borrow(uint256,address)"(
      _amountToBorrow: BigNumberish,
      _debtOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowBalanceCurrent(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "borrowBalanceCurrent(address)"(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowBalancePrior(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrowBalancePrior(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    calcBorrowLimit(
      _collateralValueInUSD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcBorrowLimit(uint256)"(
      _collateralValueInUSD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcCollateralRequired(
      _borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcCollateralRequired(uint256)"(
      _borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateLiquidationFee(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateLiquidationFee(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralAsset(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralAsset()"(overrides?: CallOverrides): Promise<BigNumber>;

    collateralFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    collateralOfAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collateralOfAccount(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtToken(overrides?: CallOverrides): Promise<BigNumber>;

    "debtToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    depositBorrowAsset(
      _tokenReceipeint: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositBorrowAsset(address,uint256)"(
      _tokenReceipeint: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositCollateral(
      _tokenRecipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositCollateral(address,uint256)"(
      _tokenRecipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeRateCurrent(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "exchangeRateCurrent()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeWithdrawalAddr(overrides?: CallOverrides): Promise<BigNumber>;

    "feeWithdrawalAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowLimit(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBorrowLimit(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBorrowLimitInUSD(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBorrowLimitInUSD(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCashPrior(overrides?: CallOverrides): Promise<BigNumber>;

    "getCashPrior()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxWithdrawAllowed(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "getMaxWithdrawAllowed(address)"(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPriceOfBorrowAsset(overrides?: CallOverrides): Promise<BigNumber>;

    "getPriceOfBorrowAsset()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceOfCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    "getPriceOfCollateral()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceOfToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriceOfToken(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalAvailableCollateralValue(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalAvailableCollateralValue(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalAvailableCollateralValueInUSD(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalAvailableCollateralValueInUSD(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _name: string,
      _symbol: string,
      _asset: string,
      _collateralAsset: string,
      borrowConfig: {
        initialExchangeRateMantissa: BigNumberish;
        reserveFactorMantissa: BigNumberish;
        collateralFactor: BigNumberish;
        wrappedBorrowAsset: string;
        liquidationFee: BigNumberish;
        debtToken: string;
      },
      _wrappedCollateralAsset: string,
      _interestRate: string,
      _pauseGuardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(string,string,address,address,(uint256,uint256,uint256,address,uint256,address),address,address,address)"(
      _name: string,
      _symbol: string,
      _asset: string,
      _collateralAsset: string,
      borrowConfig: {
        initialExchangeRateMantissa: BigNumberish;
        reserveFactorMantissa: BigNumberish;
        collateralFactor: BigNumberish;
        wrappedBorrowAsset: string;
        liquidationFee: BigNumberish;
        debtToken: string;
      },
      _wrappedCollateralAsset: string,
      _interestRate: string,
      _pauseGuardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    interestRate(overrides?: CallOverrides): Promise<BigNumber>;

    "interestRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "liquidate(address)"(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidationFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    "oracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      action: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pause(uint8)"(
      action: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    "pauseGuardian()"(overrides?: CallOverrides): Promise<BigNumber>;

    pauseStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pauseStatus(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolLiquidationFeeShare(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolLiquidationFeeShare()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeem(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repay(
      _repayAmount: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "repay(uint256,address)"(
      _repayAmount: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrows(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBorrows()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "totalReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      action: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unpause(uint8)"(
      action: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    "vault()"(overrides?: CallOverrides): Promise<BigNumber>;

    edge(
      actions: BigNumberish[],
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "edge(uint8[],bytes[])"(
      actions: BigNumberish[],
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawCollateral(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawCollateral(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFees(
      _toWithdraw: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawFees(uint256)"(
      _toWithdraw: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrappedCollateralAsset(overrides?: CallOverrides): Promise<BigNumber>;

    "wrappedCollateralAsset()"(overrides?: CallOverrides): Promise<BigNumber>;

    wrapperBorrowedAsset(overrides?: CallOverrides): Promise<BigNumber>;

    "wrapperBorrowedAsset()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "VERSION()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountInterestIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accountInterestIndex(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accrueInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "accrueInterest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "asset()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      _amountToBorrow: BigNumberish,
      _debtOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "borrow(uint256,address)"(
      _amountToBorrow: BigNumberish,
      _debtOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowBalanceCurrent(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "borrowBalanceCurrent(address)"(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowBalancePrior(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "borrowBalancePrior(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "borrowIndex()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calcBorrowLimit(
      _collateralValueInUSD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcBorrowLimit(uint256)"(
      _collateralValueInUSD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcCollateralRequired(
      _borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcCollateralRequired(uint256)"(
      _borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateLiquidationFee(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateLiquidationFee(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "collateralAsset()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "collateralFactor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralOfAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collateralOfAccount(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "debtToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositBorrowAsset(
      _tokenReceipeint: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositBorrowAsset(address,uint256)"(
      _tokenReceipeint: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositCollateral(
      _tokenRecipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositCollateral(address,uint256)"(
      _tokenRecipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeRateCurrent(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "exchangeRateCurrent()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeWithdrawalAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeWithdrawalAddr()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBorrowLimit(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBorrowLimit(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBorrowLimitInUSD(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBorrowLimitInUSD(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCashPrior(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getCashPrior()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxWithdrawAllowed(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "getMaxWithdrawAllowed(address)"(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPriceOfBorrowAsset(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriceOfBorrowAsset()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceOfCollateral(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriceOfCollateral()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceOfToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriceOfToken(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalAvailableCollateralValue(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalAvailableCollateralValue(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalAvailableCollateralValueInUSD(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalAvailableCollateralValueInUSD(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _name: string,
      _symbol: string,
      _asset: string,
      _collateralAsset: string,
      borrowConfig: {
        initialExchangeRateMantissa: BigNumberish;
        reserveFactorMantissa: BigNumberish;
        collateralFactor: BigNumberish;
        wrappedBorrowAsset: string;
        liquidationFee: BigNumberish;
        debtToken: string;
      },
      _wrappedCollateralAsset: string,
      _interestRate: string,
      _pauseGuardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(string,string,address,address,(uint256,uint256,uint256,address,uint256,address),address,address,address)"(
      _name: string,
      _symbol: string,
      _asset: string,
      _collateralAsset: string,
      borrowConfig: {
        initialExchangeRateMantissa: BigNumberish;
        reserveFactorMantissa: BigNumberish;
        collateralFactor: BigNumberish;
        wrappedBorrowAsset: string;
        liquidationFee: BigNumberish;
        debtToken: string;
      },
      _wrappedCollateralAsset: string,
      _interestRate: string,
      _pauseGuardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    interestRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "interestRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidate(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "liquidate(address)"(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidationFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidationFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      action: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pause(uint8)"(
      action: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pauseGuardian()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pauseStatus(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolLiquidationFeeShare(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "protocolLiquidationFeeShare()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeem(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      _repayAmount: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "repay(uint256,address)"(
      _repayAmount: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBorrows(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalBorrows()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalReserves()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      action: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unpause(uint8)"(
      action: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    edge(
      actions: BigNumberish[],
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "edge(uint8[],bytes[])"(
      actions: BigNumberish[],
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawCollateral(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawCollateral(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFees(
      _toWithdraw: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawFees(uint256)"(
      _toWithdraw: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrappedCollateralAsset(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "wrappedCollateralAsset()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wrapperBorrowedAsset(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "wrapperBorrowedAsset()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
