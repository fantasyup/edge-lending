/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LendingPairInterface extends ethers.utils.Interface {
  functions: {
    "_borrow(address,uint256)": FunctionFragment;
    "_liquidate(address,address,uint256)": FunctionFragment;
    "_repayLiquidatingLoan(address,address,uint256)": FunctionFragment;
    "accrualBlockNumber()": FunctionFragment;
    "accrueInterest()": FunctionFragment;
    "asset()": FunctionFragment;
    "borrow(uint256)": FunctionFragment;
    "borrowBalanceCurrent(address)": FunctionFragment;
    "borrowBalancePrior(address)": FunctionFragment;
    "borrowIndex()": FunctionFragment;
    "calcBorrowLimit(uint256)": FunctionFragment;
    "calcCollateralRequired(uint256)": FunctionFragment;
    "calculateFee(uint256)": FunctionFragment;
    "collateralAsset()": FunctionFragment;
    "collateralOfAccount(address)": FunctionFragment;
    "control()": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "depositCollateral(uint256)": FunctionFragment;
    "divisor()": FunctionFragment;
    "exchangeRateCurrent()": FunctionFragment;
    "getBorrowLimit(address)": FunctionFragment;
    "getCashPrior()": FunctionFragment;
    "getMaxWithdrawAllowed(address)": FunctionFragment;
    "getPriceOfCollateral()": FunctionFragment;
    "getPriceOfToken(address,uint256)": FunctionFragment;
    "getTotalAvailableCollateralValue(address)": FunctionFragment;
    "getTotalBorrowedValue(address)": FunctionFragment;
    "initialize(address,address,address,address,address,address,uint256,uint256,address)": FunctionFragment;
    "interestRate()": FunctionFragment;
    "liquidateAccount(address)": FunctionFragment;
    "oracle()": FunctionFragment;
    "pairBorrowAsset()": FunctionFragment;
    "pairCollateralAsset()": FunctionFragment;
    "percent()": FunctionFragment;
    "repay(uint256)": FunctionFragment;
    "reserveFactorMantissa()": FunctionFragment;
    "totalBorrows()": FunctionFragment;
    "totalReserves()": FunctionFragment;
    "valueOfAccountCollateral(address)": FunctionFragment;
    "vault()": FunctionFragment;
    "withdraw(address,address,uint256)": FunctionFragment;
    "withdrawCollateral(uint256)": FunctionFragment;
    "wrappedAsset()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_borrow",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_liquidate",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_repayLiquidatingLoan",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "accrualBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accrueInterest",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowBalanceCurrent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowBalancePrior",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcBorrowLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcCollateralRequired",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralOfAccount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "control", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "divisor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exchangeRateCurrent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowLimit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCashPrior",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxWithdrawAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceOfCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceOfToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAvailableCollateralValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBorrowedValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "interestRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateAccount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairBorrowAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pairCollateralAsset",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "percent", values?: undefined): string;
  encodeFunctionData(functionFragment: "repay", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "reserveFactorMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrows",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "valueOfAccountCollateral",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedAsset",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "_borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_repayLiquidatingLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accrualBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accrueInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowBalanceCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowBalancePrior",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcBorrowLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcCollateralRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralOfAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "control", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "divisor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRateCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCashPrior",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxWithdrawAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceOfCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceOfToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAvailableCollateralValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBorrowedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairBorrowAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pairCollateralAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "percent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reserveFactorMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueOfAccountCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedAsset",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,uint256)": EventFragment;
    "FlashLoan(address,address,address,uint256,uint256)": EventFragment;
    "InterestAccrued(address,uint256,uint256,uint256,uint256)": EventFragment;
    "Liquidate(address,address,address,uint256,address)": EventFragment;
    "Repay(address,address,address,address,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlashLoan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterestAccrued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class LendingPair extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LendingPairInterface;

  functions: {
    _borrow(
      _borrower: string,
      _borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "_borrow(address,uint256)"(
      _borrower: string,
      _borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _liquidate(
      _account: string,
      _liquidator: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "_liquidate(address,address,uint256)"(
      _account: string,
      _liquidator: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _repayLiquidatingLoan(
      _borrower: string,
      _liquidator: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "_repayLiquidatingLoan(address,address,uint256)"(
      _borrower: string,
      _liquidator: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    accrualBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    "accrualBlockNumber()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    accrueInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "accrueInterest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<[string]>;

    "asset()"(overrides?: CallOverrides): Promise<[string]>;

    borrow(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "borrow(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowBalanceCurrent(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "borrowBalanceCurrent(address)"(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowBalancePrior(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "borrowBalancePrior(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrowIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    "borrowIndex()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    calcBorrowLimit(
      _collateralValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcBorrowLimit(uint256)"(
      _collateralValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcCollateralRequired(
      _borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcCollateralRequired(uint256)"(
      _borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateFee(
      _payedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateFee(uint256)"(
      _payedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collateralAsset(overrides?: CallOverrides): Promise<[string]>;

    "collateralAsset()"(overrides?: CallOverrides): Promise<[string]>;

    collateralOfAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "collateralOfAccount(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    control(overrides?: CallOverrides): Promise<[string]>;

    "control()"(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _tokenReceipeint: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(address,uint256)"(
      _tokenReceipeint: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositCollateral(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositCollateral(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    divisor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "divisor()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    exchangeRateCurrent(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "exchangeRateCurrent()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBorrowLimit(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "getBorrowLimit(address)"(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCashPrior(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "getCashPrior()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMaxWithdrawAllowed(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "getMaxWithdrawAllowed(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPriceOfCollateral(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getPriceOfCollateral()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPriceOfToken(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPriceOfToken(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalAvailableCollateralValue(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTotalAvailableCollateralValue(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalBorrowedValue(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "getTotalBorrowedValue(address)"(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _control: string,
      _oracle: string,
      _vault: string,
      _asset: string,
      _collateralAsset: string,
      _interestRate: string,
      _initialExchangeRateMantissa: BigNumberish,
      _reserveFactorMantissa: BigNumberish,
      _wrappedBorrowAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address,address,address,uint256,uint256,address)"(
      _control: string,
      _oracle: string,
      _vault: string,
      _asset: string,
      _collateralAsset: string,
      _interestRate: string,
      _initialExchangeRateMantissa: BigNumberish,
      _reserveFactorMantissa: BigNumberish,
      _wrappedBorrowAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    interestRate(overrides?: CallOverrides): Promise<[string]>;

    "interestRate()"(overrides?: CallOverrides): Promise<[string]>;

    liquidateAccount(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "liquidateAccount(address)"(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    "oracle()"(overrides?: CallOverrides): Promise<[string]>;

    pairBorrowAsset(overrides?: CallOverrides): Promise<[string]>;

    "pairBorrowAsset()"(overrides?: CallOverrides): Promise<[string]>;

    pairCollateralAsset(overrides?: CallOverrides): Promise<[string]>;

    "pairCollateralAsset()"(overrides?: CallOverrides): Promise<[string]>;

    percent(overrides?: CallOverrides): Promise<[BigNumber]>;

    "percent()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    repay(
      _repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "repay(uint256)"(
      _repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserveFactorMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    "reserveFactorMantissa()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalBorrows(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalBorrows()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalReserves(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalReserves()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    valueOfAccountCollateral(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "valueOfAccountCollateral(address)"(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    "vault()"(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _user: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(address,address,uint256)"(
      _user: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawCollateral(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawCollateral(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrappedAsset(overrides?: CallOverrides): Promise<[string]>;

    "wrappedAsset()"(overrides?: CallOverrides): Promise<[string]>;
  };

  _borrow(
    _borrower: string,
    _borrowAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "_borrow(address,uint256)"(
    _borrower: string,
    _borrowAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _liquidate(
    _account: string,
    _liquidator: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "_liquidate(address,address,uint256)"(
    _account: string,
    _liquidator: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _repayLiquidatingLoan(
    _borrower: string,
    _liquidator: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "_repayLiquidatingLoan(address,address,uint256)"(
    _borrower: string,
    _liquidator: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  accrualBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  "accrualBlockNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

  accrueInterest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "accrueInterest()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  "asset()"(overrides?: CallOverrides): Promise<string>;

  borrow(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "borrow(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowBalanceCurrent(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "borrowBalanceCurrent(address)"(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowBalancePrior(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "borrowBalancePrior(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrowIndex(overrides?: CallOverrides): Promise<BigNumber>;

  "borrowIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

  calcBorrowLimit(
    _collateralValue: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcBorrowLimit(uint256)"(
    _collateralValue: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcCollateralRequired(
    _borrowAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcCollateralRequired(uint256)"(
    _borrowAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateFee(
    _payedAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateFee(uint256)"(
    _payedAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateralAsset(overrides?: CallOverrides): Promise<string>;

  "collateralAsset()"(overrides?: CallOverrides): Promise<string>;

  collateralOfAccount(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "collateralOfAccount(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  control(overrides?: CallOverrides): Promise<string>;

  "control()"(overrides?: CallOverrides): Promise<string>;

  deposit(
    _tokenReceipeint: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(address,uint256)"(
    _tokenReceipeint: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositCollateral(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositCollateral(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  divisor(overrides?: CallOverrides): Promise<BigNumber>;

  "divisor()"(overrides?: CallOverrides): Promise<BigNumber>;

  exchangeRateCurrent(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "exchangeRateCurrent()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBorrowLimit(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "getBorrowLimit(address)"(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCashPrior(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "getCashPrior()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMaxWithdrawAllowed(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "getMaxWithdrawAllowed(address)"(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPriceOfCollateral(overrides?: CallOverrides): Promise<BigNumber>;

  "getPriceOfCollateral()"(overrides?: CallOverrides): Promise<BigNumber>;

  getPriceOfToken(
    token: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPriceOfToken(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalAvailableCollateralValue(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTotalAvailableCollateralValue(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalBorrowedValue(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "getTotalBorrowedValue(address)"(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _control: string,
    _oracle: string,
    _vault: string,
    _asset: string,
    _collateralAsset: string,
    _interestRate: string,
    _initialExchangeRateMantissa: BigNumberish,
    _reserveFactorMantissa: BigNumberish,
    _wrappedBorrowAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address,address,address,uint256,uint256,address)"(
    _control: string,
    _oracle: string,
    _vault: string,
    _asset: string,
    _collateralAsset: string,
    _interestRate: string,
    _initialExchangeRateMantissa: BigNumberish,
    _reserveFactorMantissa: BigNumberish,
    _wrappedBorrowAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  interestRate(overrides?: CallOverrides): Promise<string>;

  "interestRate()"(overrides?: CallOverrides): Promise<string>;

  liquidateAccount(
    _borrower: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "liquidateAccount(address)"(
    _borrower: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  oracle(overrides?: CallOverrides): Promise<string>;

  "oracle()"(overrides?: CallOverrides): Promise<string>;

  pairBorrowAsset(overrides?: CallOverrides): Promise<string>;

  "pairBorrowAsset()"(overrides?: CallOverrides): Promise<string>;

  pairCollateralAsset(overrides?: CallOverrides): Promise<string>;

  "pairCollateralAsset()"(overrides?: CallOverrides): Promise<string>;

  percent(overrides?: CallOverrides): Promise<BigNumber>;

  "percent()"(overrides?: CallOverrides): Promise<BigNumber>;

  repay(
    _repayAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "repay(uint256)"(
    _repayAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserveFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  "reserveFactorMantissa()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalBorrows(overrides?: CallOverrides): Promise<BigNumber>;

  "totalBorrows()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalReserves(overrides?: CallOverrides): Promise<BigNumber>;

  "totalReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

  valueOfAccountCollateral(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "valueOfAccountCollateral(address)"(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  "vault()"(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _user: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(address,address,uint256)"(
    _user: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawCollateral(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawCollateral(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrappedAsset(overrides?: CallOverrides): Promise<string>;

  "wrappedAsset()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _borrow(
      _borrower: string,
      _borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "_borrow(address,uint256)"(
      _borrower: string,
      _borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _liquidate(
      _account: string,
      _liquidator: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "_liquidate(address,address,uint256)"(
      _account: string,
      _liquidator: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _repayLiquidatingLoan(
      _borrower: string,
      _liquidator: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "_repayLiquidatingLoan(address,address,uint256)"(
      _borrower: string,
      _liquidator: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    accrualBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    "accrualBlockNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

    accrueInterest(overrides?: CallOverrides): Promise<void>;

    "accrueInterest()"(overrides?: CallOverrides): Promise<void>;

    asset(overrides?: CallOverrides): Promise<string>;

    "asset()"(overrides?: CallOverrides): Promise<string>;

    borrow(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "borrow(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowBalanceCurrent(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrowBalanceCurrent(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowBalancePrior(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrowBalancePrior(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    calcBorrowLimit(
      _collateralValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcBorrowLimit(uint256)"(
      _collateralValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcCollateralRequired(
      _borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcCollateralRequired(uint256)"(
      _borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateFee(
      _payedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateFee(uint256)"(
      _payedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralAsset(overrides?: CallOverrides): Promise<string>;

    "collateralAsset()"(overrides?: CallOverrides): Promise<string>;

    collateralOfAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collateralOfAccount(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    control(overrides?: CallOverrides): Promise<string>;

    "control()"(overrides?: CallOverrides): Promise<string>;

    deposit(
      _tokenReceipeint: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(address,uint256)"(
      _tokenReceipeint: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositCollateral(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositCollateral(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    divisor(overrides?: CallOverrides): Promise<BigNumber>;

    "divisor()"(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRateCurrent(overrides?: CallOverrides): Promise<BigNumber>;

    "exchangeRateCurrent()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowLimit(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBorrowLimit(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCashPrior(overrides?: CallOverrides): Promise<BigNumber>;

    "getCashPrior()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxWithdrawAllowed(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMaxWithdrawAllowed(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceOfCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    "getPriceOfCollateral()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceOfToken(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriceOfToken(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalAvailableCollateralValue(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalAvailableCollateralValue(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalBorrowedValue(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalBorrowedValue(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _control: string,
      _oracle: string,
      _vault: string,
      _asset: string,
      _collateralAsset: string,
      _interestRate: string,
      _initialExchangeRateMantissa: BigNumberish,
      _reserveFactorMantissa: BigNumberish,
      _wrappedBorrowAsset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address,address,address,uint256,uint256,address)"(
      _control: string,
      _oracle: string,
      _vault: string,
      _asset: string,
      _collateralAsset: string,
      _interestRate: string,
      _initialExchangeRateMantissa: BigNumberish,
      _reserveFactorMantissa: BigNumberish,
      _wrappedBorrowAsset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    interestRate(overrides?: CallOverrides): Promise<string>;

    "interestRate()"(overrides?: CallOverrides): Promise<string>;

    liquidateAccount(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "liquidateAccount(address)"(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<void>;

    oracle(overrides?: CallOverrides): Promise<string>;

    "oracle()"(overrides?: CallOverrides): Promise<string>;

    pairBorrowAsset(overrides?: CallOverrides): Promise<string>;

    "pairBorrowAsset()"(overrides?: CallOverrides): Promise<string>;

    pairCollateralAsset(overrides?: CallOverrides): Promise<string>;

    "pairCollateralAsset()"(overrides?: CallOverrides): Promise<string>;

    percent(overrides?: CallOverrides): Promise<BigNumber>;

    "percent()"(overrides?: CallOverrides): Promise<BigNumber>;

    repay(_repayAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "repay(uint256)"(
      _repayAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reserveFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    "reserveFactorMantissa()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrows(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBorrows()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "totalReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    valueOfAccountCollateral(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "valueOfAccountCollateral(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<string>;

    "vault()"(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _user: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,address,uint256)"(
      _user: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawCollateral(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawCollateral(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wrappedAsset(overrides?: CallOverrides): Promise<string>;

    "wrappedAsset()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Deposit(
      _account: string | null,
      _amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _account: string; _amount: BigNumber }
    >;

    FlashLoan(
      target: string | null,
      initiator: string | null,
      asset: string | null,
      amount: null,
      premium: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        target: string;
        initiator: string;
        asset: string;
        amount: BigNumber;
        premium: BigNumber;
      }
    >;

    InterestAccrued(
      pair: string | null,
      accrualBlockNumber: null,
      borrowIndex: null,
      totalBorrows: null,
      totalReserves: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        pair: string;
        accrualBlockNumber: BigNumber;
        borrowIndex: BigNumber;
        totalBorrows: BigNumber;
        totalReserves: BigNumber;
      }
    >;

    Liquidate(
      pair: string | null,
      asset: string | null,
      user: string | null,
      liquidatedCollateralAmount: null,
      liquidator: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string],
      {
        pair: string;
        asset: string;
        user: string;
        liquidatedCollateralAmount: BigNumber;
        liquidator: string;
      }
    >;

    Repay(
      pair: string | null,
      asset: string | null,
      beneficiary: string | null,
      repayer: null,
      amount: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber],
      {
        pair: string;
        asset: string;
        beneficiary: string;
        repayer: string;
        amount: BigNumber;
      }
    >;

    Withdraw(
      _account: null,
      _amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _account: string; _amount: BigNumber }
    >;
  };

  estimateGas: {
    _borrow(
      _borrower: string,
      _borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "_borrow(address,uint256)"(
      _borrower: string,
      _borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _liquidate(
      _account: string,
      _liquidator: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "_liquidate(address,address,uint256)"(
      _account: string,
      _liquidator: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _repayLiquidatingLoan(
      _borrower: string,
      _liquidator: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "_repayLiquidatingLoan(address,address,uint256)"(
      _borrower: string,
      _liquidator: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    accrualBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    "accrualBlockNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

    accrueInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "accrueInterest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    "asset()"(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "borrow(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowBalanceCurrent(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "borrowBalanceCurrent(address)"(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowBalancePrior(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrowBalancePrior(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    calcBorrowLimit(
      _collateralValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcBorrowLimit(uint256)"(
      _collateralValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcCollateralRequired(
      _borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcCollateralRequired(uint256)"(
      _borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateFee(
      _payedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateFee(uint256)"(
      _payedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralAsset(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralAsset()"(overrides?: CallOverrides): Promise<BigNumber>;

    collateralOfAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collateralOfAccount(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    control(overrides?: CallOverrides): Promise<BigNumber>;

    "control()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _tokenReceipeint: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(address,uint256)"(
      _tokenReceipeint: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositCollateral(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositCollateral(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    divisor(overrides?: CallOverrides): Promise<BigNumber>;

    "divisor()"(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRateCurrent(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "exchangeRateCurrent()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBorrowLimit(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "getBorrowLimit(address)"(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCashPrior(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "getCashPrior()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMaxWithdrawAllowed(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "getMaxWithdrawAllowed(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPriceOfCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    "getPriceOfCollateral()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceOfToken(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriceOfToken(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalAvailableCollateralValue(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalAvailableCollateralValue(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalBorrowedValue(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "getTotalBorrowedValue(address)"(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _control: string,
      _oracle: string,
      _vault: string,
      _asset: string,
      _collateralAsset: string,
      _interestRate: string,
      _initialExchangeRateMantissa: BigNumberish,
      _reserveFactorMantissa: BigNumberish,
      _wrappedBorrowAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address,address,address,address,address,uint256,uint256,address)"(
      _control: string,
      _oracle: string,
      _vault: string,
      _asset: string,
      _collateralAsset: string,
      _interestRate: string,
      _initialExchangeRateMantissa: BigNumberish,
      _reserveFactorMantissa: BigNumberish,
      _wrappedBorrowAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    interestRate(overrides?: CallOverrides): Promise<BigNumber>;

    "interestRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateAccount(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "liquidateAccount(address)"(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    "oracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    pairBorrowAsset(overrides?: CallOverrides): Promise<BigNumber>;

    "pairBorrowAsset()"(overrides?: CallOverrides): Promise<BigNumber>;

    pairCollateralAsset(overrides?: CallOverrides): Promise<BigNumber>;

    "pairCollateralAsset()"(overrides?: CallOverrides): Promise<BigNumber>;

    percent(overrides?: CallOverrides): Promise<BigNumber>;

    "percent()"(overrides?: CallOverrides): Promise<BigNumber>;

    repay(
      _repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "repay(uint256)"(
      _repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserveFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    "reserveFactorMantissa()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrows(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBorrows()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "totalReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    valueOfAccountCollateral(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "valueOfAccountCollateral(address)"(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    "vault()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _user: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(address,address,uint256)"(
      _user: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawCollateral(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawCollateral(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrappedAsset(overrides?: CallOverrides): Promise<BigNumber>;

    "wrappedAsset()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _borrow(
      _borrower: string,
      _borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "_borrow(address,uint256)"(
      _borrower: string,
      _borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _liquidate(
      _account: string,
      _liquidator: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "_liquidate(address,address,uint256)"(
      _account: string,
      _liquidator: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _repayLiquidatingLoan(
      _borrower: string,
      _liquidator: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "_repayLiquidatingLoan(address,address,uint256)"(
      _borrower: string,
      _liquidator: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    accrualBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accrualBlockNumber()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accrueInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "accrueInterest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "asset()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "borrow(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowBalanceCurrent(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "borrowBalanceCurrent(address)"(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowBalancePrior(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "borrowBalancePrior(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "borrowIndex()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calcBorrowLimit(
      _collateralValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcBorrowLimit(uint256)"(
      _collateralValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcCollateralRequired(
      _borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcCollateralRequired(uint256)"(
      _borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateFee(
      _payedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateFee(uint256)"(
      _payedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "collateralAsset()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralOfAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collateralOfAccount(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    control(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "control()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _tokenReceipeint: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(address,uint256)"(
      _tokenReceipeint: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositCollateral(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositCollateral(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    divisor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "divisor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeRateCurrent(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "exchangeRateCurrent()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBorrowLimit(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "getBorrowLimit(address)"(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCashPrior(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "getCashPrior()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMaxWithdrawAllowed(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "getMaxWithdrawAllowed(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPriceOfCollateral(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriceOfCollateral()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceOfToken(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriceOfToken(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalAvailableCollateralValue(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalAvailableCollateralValue(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBorrowedValue(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "getTotalBorrowedValue(address)"(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _control: string,
      _oracle: string,
      _vault: string,
      _asset: string,
      _collateralAsset: string,
      _interestRate: string,
      _initialExchangeRateMantissa: BigNumberish,
      _reserveFactorMantissa: BigNumberish,
      _wrappedBorrowAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address,address,address,uint256,uint256,address)"(
      _control: string,
      _oracle: string,
      _vault: string,
      _asset: string,
      _collateralAsset: string,
      _interestRate: string,
      _initialExchangeRateMantissa: BigNumberish,
      _reserveFactorMantissa: BigNumberish,
      _wrappedBorrowAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    interestRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "interestRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateAccount(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "liquidateAccount(address)"(
      _borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairBorrowAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pairBorrowAsset()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairCollateralAsset(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pairCollateralAsset()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    percent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "percent()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repay(
      _repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "repay(uint256)"(
      _repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserveFactorMantissa(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reserveFactorMantissa()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBorrows(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalBorrows()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalReserves()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    valueOfAccountCollateral(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "valueOfAccountCollateral(address)"(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _user: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(address,address,uint256)"(
      _user: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawCollateral(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawCollateral(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrappedAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wrappedAsset()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
