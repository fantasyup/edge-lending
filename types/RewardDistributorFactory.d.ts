/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RewardDistributorFactoryInterface extends ethers.utils.Interface {
  functions: {
    "createRewardDistributor(string,address,uint256,uint256,uint256,address)": FunctionFragment;
    "distributorImplementation()": FunctionFragment;
    "owner()": FunctionFragment;
    "rewardDistributors(uint256)": FunctionFragment;
    "setDistributorImplementation(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createRewardDistributor",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "distributorImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardDistributors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributorImplementation",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "createRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributorImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardDistributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDistributorImplementation",
    data: BytesLike
  ): Result;

  events: {
    "NewImpl(address,uint256)": EventFragment;
    "NewRewardDistributor(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewImpl"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewRewardDistributor"): EventFragment;
}

export class RewardDistributorFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RewardDistributorFactoryInterface;

  functions: {
    createRewardDistributor(
      _name: string,
      _rewardToken: string,
      _amountDistributePerSecond: BigNumberish,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createRewardDistributor(string,address,uint256,uint256,uint256,address)"(
      _name: string,
      _rewardToken: string,
      _amountDistributePerSecond: BigNumberish,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributorImplementation(overrides?: CallOverrides): Promise<[string]>;

    "distributorImplementation()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    rewardDistributors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "rewardDistributors(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setDistributorImplementation(
      _impl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setDistributorImplementation(address)"(
      _impl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createRewardDistributor(
    _name: string,
    _rewardToken: string,
    _amountDistributePerSecond: BigNumberish,
    _startTimestamp: BigNumberish,
    _endTimestamp: BigNumberish,
    _guardian: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createRewardDistributor(string,address,uint256,uint256,uint256,address)"(
    _name: string,
    _rewardToken: string,
    _amountDistributePerSecond: BigNumberish,
    _startTimestamp: BigNumberish,
    _endTimestamp: BigNumberish,
    _guardian: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributorImplementation(overrides?: CallOverrides): Promise<string>;

  "distributorImplementation()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  rewardDistributors(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "rewardDistributors(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  setDistributorImplementation(
    _impl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setDistributorImplementation(address)"(
    _impl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createRewardDistributor(
      _name: string,
      _rewardToken: string,
      _amountDistributePerSecond: BigNumberish,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _guardian: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "createRewardDistributor(string,address,uint256,uint256,uint256,address)"(
      _name: string,
      _rewardToken: string,
      _amountDistributePerSecond: BigNumberish,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _guardian: string,
      overrides?: CallOverrides
    ): Promise<void>;

    distributorImplementation(overrides?: CallOverrides): Promise<string>;

    "distributorImplementation()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    rewardDistributors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "rewardDistributors(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setDistributorImplementation(
      _impl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDistributorImplementation(address)"(
      _impl: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    NewImpl(
      pairLogic: null,
      timestamp: null
    ): TypedEventFilter<
      [string, BigNumber],
      { pairLogic: string; timestamp: BigNumber }
    >;

    NewRewardDistributor(
      distributor: null,
      timestamp: null
    ): TypedEventFilter<
      [string, BigNumber],
      { distributor: string; timestamp: BigNumber }
    >;
  };

  estimateGas: {
    createRewardDistributor(
      _name: string,
      _rewardToken: string,
      _amountDistributePerSecond: BigNumberish,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createRewardDistributor(string,address,uint256,uint256,uint256,address)"(
      _name: string,
      _rewardToken: string,
      _amountDistributePerSecond: BigNumberish,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributorImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    "distributorImplementation()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardDistributors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardDistributors(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDistributorImplementation(
      _impl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setDistributorImplementation(address)"(
      _impl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createRewardDistributor(
      _name: string,
      _rewardToken: string,
      _amountDistributePerSecond: BigNumberish,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createRewardDistributor(string,address,uint256,uint256,uint256,address)"(
      _name: string,
      _rewardToken: string,
      _amountDistributePerSecond: BigNumberish,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributorImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "distributorImplementation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardDistributors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardDistributors(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDistributorImplementation(
      _impl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setDistributorImplementation(address)"(
      _impl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
